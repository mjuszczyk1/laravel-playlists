// Variables
//

// Table of Contents
//
// Colors: _colors.scss
// Options: _options.scss
// Spacing: _spacing.scss
// Body: _body.scss
// Links: _links.scss
// Grid breakpoints: _grid-breakpoints.scss
// Grid containers: _grid-containers.scss
// Grid columns: _grid-columns.scss
// Fonts: _fonts.scss
// Components: _components.scss
// Tables: _tables.scss
// Buttons: _buttons.scss
// Forms: _forms.scss
// Dropdowns: dropdowns.scss
// Z-index master list: _z-index.scss
// Navbar: _navbar.scss
// Navs: _navs.scss
// Pagination: _pagination.scss
// Jumbotron: _jumbotron.scss
// Form states and alerts: _form-states.scss
// Cards: _cards.scss
// Tooltips: _tooltips.scss
// Popovers: _popovers.scss
// Badges: _badges.scss
// Modals: _modals.scss
// Alerts: _alerts.scss
// Progress bars: _progress-bars.scss
// List group: _list-group.scss
// Image thumbnails: _image-thumbnails.scss
// Figures: _figures.scss
// Breadcrumbs: _breadcrumbs.scss
// Carousel: _carousel.scss
// Close: _close.scss
// Code: _code.scss

@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num == null {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

// Replace `$search` with `$replace` in `$string`
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@mixin _assert-starts-at-zero($map) {
  $values: map-values($map);
  $first-value: nth($values, 1);
  @if $first-value != 0 {
    @warn "First breakpoint in `$grid-breakpoints` must start at 0, but starts at #{$first-value}.";
  }
}